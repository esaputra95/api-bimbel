generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex", "fullTextSearch"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// This model has been renamed to 'classMaster' during introspection, because the original name 'class' is reserved.
model classMaster {
  id          String        @id @default(uuid()) @db.VarChar(36)
  code        String?       @db.VarChar(15)
  name        String        @db.VarChar(25)
  classTypeId String        @db.VarChar(36)
  quantity    Int?
  price       Int?
  method      class_method? @default(online)
  description String?       @db.VarChar(50)
  userCreate  String?       @db.VarChar(36)
  createdAt   DateTime?     @default(now()) @db.DateTime(0)
  updatedAt   DateTime?     @default(now()) @db.DateTime(0)
  deletedAt   DateTime?     @db.DateTime(0)
  classTypes  classTypes    @relation(fields: [classTypeId], references: [id], onUpdate: Restrict, map: "class_ibfk_2")
  users       users?        @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "class_ibfk_3")
  registers   registers[]
  studyGroups studyGroups[]

  @@index([classTypeId], map: "classTypeId")
  @@index([userCreate], map: "useraCreate")
  @@map("class")
}

model classTypes {
  id          String        @id @default(uuid()) @db.VarChar(36)
  code        String?       @db.VarChar(15)
  name        String?       @db.VarChar(25)
  price       Decimal?      @db.Decimal(14, 3)
  quantity    Int?
  description String?       @db.VarChar(50)
  userCreate  String?       @db.VarChar(36)
  createdAt   DateTime?     @default(now()) @db.DateTime(0)
  updatedAt   DateTime?     @default(now()) @db.DateTime(0)
  deletedAt   DateTime?     @db.DateTime(0)
  classMaster classMaster[]
  users       users?        @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "classtypes_ibfk_1")
  schedules   schedules[]

  @@index([userCreate], map: "useraCreate")
}

model courses {
  id           String         @id @default(uuid()) @db.VarChar(36)
  majorId      String?        @db.VarChar(36)
  code         String?        @db.VarChar(50)
  name         String?        @db.VarChar(150)
  description  String?        @db.VarChar(255)
  userCreate   String?        @db.VarChar(36)
  createdAt    DateTime?      @default(now()) @db.DateTime(0)
  updatedAt    DateTime?      @default(now()) @db.DateTime(0)
  deletedAt    DateTime?      @db.DateTime(0)
  majors       majors?        @relation(fields: [majorId], references: [id], onDelete: Cascade, map: "courses_ibfk_1")
  users        users?         @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "courses_ibfk_2")
  materials    materials[]
  recordMateri recordMateri[]
  schedules    schedules[]
  tentorSkills tentorSkills[]

  @@index([majorId], map: "majorId")
  @@index([userCreate], map: "userCreate")
}

model guidanceTypes {
  id          String              @id @default(uuid()) @db.VarChar(50)
  name        String?             @db.VarChar(150)
  total       Int?
  type        guidanceTypes_type? @default(regular)
  userCreate  String?             @db.VarChar(36)
  createdAt   DateTime?           @default(now()) @db.DateTime(0)
  updatedAt   DateTime?           @default(now()) @db.DateTime(0)
  deletedAt   DateTime?           @db.DateTime(0)
  users       users?              @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "guidancetypes_ibfk_1")
  registers   registers[]
  studyGroups studyGroups[]

  @@index([userCreate], map: "userCreate")
}

model locations {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String?   @db.VarChar(150)
  description String?   @db.VarChar(150)
  userCreate  String?   @db.VarChar(36)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  users       users?    @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "locations_ibfk_1")

  @@index([userCreate], map: "userCreate")
}

model majors {
  id           String       @id @default(uuid()) @db.VarChar(36)
  universityId String       @db.VarChar(36)
  code         String?      @db.VarChar(50)
  name         String       @db.VarChar(150)
  description  String?      @db.VarChar(255)
  userCreate   String?      @db.VarChar(36)
  createdAt    DateTime?    @default(now()) @db.DateTime(0)
  updatedAt    DateTime?    @default(now()) @db.DateTime(0)
  deletedAt    DateTime?    @db.DateTime(0)
  courses      courses[]
  universities universities @relation(fields: [universityId], references: [id], onDelete: Cascade, map: "majors_ibfk_1")
  users        users?       @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "majors_ibfk_2")

  @@index([universityId], map: "universityId")
  @@index([userCreate], map: "userCreate")
}

model materials {
  id          String    @id @default(uuid()) @db.VarChar(36)
  code        String?   @db.VarChar(100)
  courseId    String?   @db.VarChar(36)
  userCreate  String?   @db.VarChar(36)
  name        String?   @db.VarChar(100)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  description String?   @db.VarChar(255)
  courses     courses?  @relation(fields: [courseId], references: [id], onDelete: Cascade, map: "materials_ibfk_1")
  users       users?    @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "materials_ibfk_2")

  @@index([courseId], map: "courseId")
  @@index([userCreate], map: "userCreate")
}

model packages {
  id          String      @id @default(uuid()) @db.VarChar(36)
  name        String?     @db.VarChar(150)
  description String?     @db.VarChar(150)
  userCreate  String?     @db.VarChar(36)
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  updatedAt   DateTime?   @default(now()) @db.DateTime(0)
  deletedAt   DateTime?   @db.DateTime(0)
  users       users?      @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "packages_ibfk_1")
  registers   registers[]

  @@index([userCreate], map: "userCreate")
}

model payrollDetails {
  id           String     @id @default(uuid()) @db.VarChar(36)
  payrollId    String?    @db.VarChar(36)
  scheduleId   String?    @db.VarChar(36)
  price        Decimal?   @db.Decimal(14, 4)
  totalStudent Int?
  userCreate   String?    @db.VarChar(36)
  createdAt    DateTime?  @default(now()) @db.DateTime(0)
  updatedAt    DateTime?  @default(now()) @db.DateTime(0)
  deletedAt    DateTime?  @db.DateTime(0)
  payrolls     payrolls?  @relation(fields: [payrollId], references: [id], onDelete: Cascade, map: "payrolldetails_ibfk_1")
  schedules    schedules? @relation(fields: [scheduleId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "payrolldetails_ibfk_2")
  users        users?     @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "payrolldetails_ibfk_3")

  @@index([payrollId], map: "payrollId")
  @@index([scheduleId], map: "scheduleId")
  @@index([userCreate], map: "userCreate")
}

model payrolls {
  id                               String           @id @default(uuid()) @db.VarChar(36)
  userId                           String?          @db.VarChar(36)
  basicSalary                      Decimal?         @db.Decimal(14, 4)
  sessionSalary                    Decimal?         @db.Decimal(14, 4)
  total                            Decimal?         @db.Decimal(14, 4)
  month                            DateTime?        @db.Date
  userCreate                       String?          @db.VarChar(36)
  createdAt                        DateTime?        @default(now()) @db.DateTime(0)
  updatedAt                        DateTime?        @default(now()) @db.DateTime(0)
  deletedAt                        DateTime?        @db.DateTime(0)
  payrollDetails                   payrollDetails[]
  userTentor                       users?           @relation("payrolls_userIdTousers", fields: [userId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "payrolls_ibfk_1")
  users_payrolls_userCreateTousers users?           @relation("payrolls_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "payrolls_ibfk_2")

  @@index([userCreate], map: "userCreate")
  @@index([userId], map: "userId")
}

model permissionNames {
  id         String    @id @default(uuid()) @db.VarChar(36)
  name       String?   @db.VarChar(150)
  group      String?   @db.VarChar(100)
  userCreate String?   @db.VarChar(36)
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @default(now()) @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  users      users?    @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "permissionnames_ibfk_1")

  @@index([userCreate], map: "userCreate")
}

model permissions {
  id                 String               @id @default(uuid()) @db.VarChar(36)
  name               String?              @db.VarChar(100)
  action             String?              @db.VarChar(150)
  userCreate         String?              @db.VarChar(36)
  createdAt          DateTime?            @default(now()) @db.DateTime(0)
  updatedAt          DateTime?            @default(now()) @db.DateTime(0)
  deletedAt          DateTime?            @db.DateTime(0)
  roleHasPermissions roleHasPermissions[]
}

model recordMateri {
  id               String           @id @default(uuid()) @db.VarChar(36)
  date             DateTime?        @db.DateTime(0)
  scheduleDetailId String?          @db.VarChar(36)
  studentId        String?          @db.VarChar(36)
  tentorId         String?          @db.VarChar(36)
  materiId         String?          @db.VarChar(36)
  description      String?          @db.Text
  advice           String?          @db.Text
  userCreate       String?          @db.VarChar(36)
  createdAt        DateTime?        @default(now()) @db.DateTime(0)
  updatedAt        DateTime?        @default(now()) @db.DateTime(0)
  deletedAt        DateTime?        @db.DateTime(0)
  students         students?        @relation(fields: [studentId], references: [id], onDelete: Cascade, map: "recordmateri_ibfk_1")
  users            users?           @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "recordmateri_ibfk_3")
  scheduleDetails  scheduleDetails? @relation(fields: [scheduleDetailId], references: [id], onDelete: Cascade, map: "recordmateri_ibfk_4")
  materials        courses?         @relation(fields: [materiId], references: [id], onDelete: Cascade, map: "recordmateri_ibfk_2")
  userTentor       users?           @relation("recordMateri_tentorIdTousers", fields: [tentorId], references: [id], onDelete: Restrict, map: "recordmateri_ibfk_6")

  @@index([materiId], map: "materiId")
  @@index([studentId], map: "studentId")
  @@index([userCreate], map: "userCreate")
  @@index([scheduleDetailId], map: "scheduleDetailId")
  @@index([tentorId], map: "tentorId")
}

model registers {
  id             String                   @id @default(uuid()) @db.VarChar(36)
  studentId      String?                  @db.VarChar(36)
  classId        String?                  @db.VarChar(36)
  university     String?                  @db.VarChar(255)
  amount         Int?
  sessionId      String?                  @db.VarChar(36)
  packageId      String?                  @db.VarChar(36)
  guidanceTypeId String?                  @db.VarChar(36)
  location       String?                  @db.VarChar(36)
  schoolYearId   String?                  @db.VarChar(36)
  status         Int?                     @default(0) @db.SmallInt
  userCreate     String?                  @db.VarChar(36)
  createdAt      DateTime?                @default(now()) @db.DateTime(0)
  updatedAt      DateTime?                @default(now()) @db.DateTime(0)
  deletedAt      DateTime?                @db.DateTime(0)
  invoiceStatus  registers_invoiceStatus? @default(pending)
  isModule       Int?                     @db.SmallInt
  students       students?                @relation(fields: [studentId], references: [id], onDelete: Cascade, map: "registers_ibfk_1")
  classMaster    classMaster?             @relation(fields: [classId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "registers_ibfk_2")
  sessions       sessions?                @relation(fields: [sessionId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "registers_ibfk_4")
  packages       packages?                @relation(fields: [packageId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "registers_ibfk_5")
  guidanceTypes  guidanceTypes?           @relation(fields: [guidanceTypeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "registers_ibfk_6")
  schoolYears    schoolYears?             @relation(fields: [schoolYearId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "registers_ibfk_8")
  users          users?                   @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "registers_ibfk_9")

  @@index([classId], map: "classId")
  @@index([guidanceTypeId], map: "guidanceTypeId")
  @@index([packageId], map: "packageId")
  @@index([schoolYearId], map: "schoolYearId")
  @@index([sessionId], map: "sessionId")
  @@index([studentId], map: "studentId")
  @@index([userCreate], map: "userCreate")
}

model roleHasPermissions {
  id           String       @id @default(uuid()) @db.VarChar(36)
  roleId       String?      @db.VarChar(36)
  permissionId String?      @db.VarChar(36)
  userCreate   String?      @db.VarChar(36)
  createdAt    DateTime?    @default(now()) @db.DateTime(0)
  updatedAt    DateTime?    @default(now()) @db.DateTime(0)
  deletedAt    DateTime?    @db.DateTime(0)
  users        users?       @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "rolehaspermissions_ibfk_1")
  roles        roles?       @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "rolehaspermissions_ibfk_2")
  permissions  permissions? @relation(fields: [permissionId], references: [id], onDelete: Cascade, map: "rolehaspermissions_ibfk_3")

  @@index([permissionId], map: "permissionId")
  @@index([roleId], map: "roleId")
  @@index([userCreate], map: "userCreate")
}

model roles {
  id                            String               @id @default(uuid()) @db.VarChar(36)
  name                          String?              @db.VarChar(100)
  description                   String?              @db.VarChar(255)
  userCreate                    String?              @db.VarChar(36)
  createdAt                     DateTime?            @default(now()) @db.DateTime(0)
  updatedAt                     DateTime?            @default(now()) @db.DateTime(0)
  deletedAt                     DateTime?            @db.DateTime(0)
  roleHasPermissions            roleHasPermissions[]
  users_roles_userCreateTousers users?               @relation("roles_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "roles_ibfk_1")
  userHasRoles                  userHasRoles[]
  users_users_roleIdToroles     users[]              @relation("users_roleIdToroles")

  @@index([userCreate], map: "userCreate")
}

model rooms {
  id          String      @id @default(uuid()) @db.VarChar(36)
  code        String?     @db.VarChar(15)
  name        String?     @db.VarChar(25)
  description String?     @db.VarChar(50)
  userCreate  String?     @db.VarChar(36)
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  updatedAt   DateTime?   @default(now()) @db.DateTime(0)
  deletedAt   DateTime?   @db.DateTime(0)
  users       users?      @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "rooms_ibfk_1")
  schedules   schedules[]

  @@index([userCreate], map: "useraCreate")
}

model schedules {
  id                                String            @id @default(uuid()) @db.VarChar(36)
  studyGroupId                      String?            @db.VarChar(36)
  date                              DateTime          @db.DateTime(0)
  tentorId                          String            @db.VarChar(36)
  roomId                            String?           @db.VarChar(36)
  type                              schedules_type?   @default(study)
  courseId                          String?           @db.VarChar(36)
  method                            schedules_method? @default(online)
  scheduleType                      String?           @db.VarChar(36)
  status                            schedules_status? @default(active)
  userCreate                        String?           @db.VarChar(36)
  createdAt                         DateTime?         @default(now()) @db.DateTime(0)
  updatedAt                         DateTime?         @default(now()) @db.DateTime(0)
  deletedAt                         DateTime?         @db.DateTime(0)
  payrollDetails                    payrollDetails[]
  scheduleDetails                   scheduleDetails[]
  studyGroups                       studyGroups?       @relation(fields: [studyGroupId], references: [id], onUpdate: Restrict, map: "schedules_ibfk_1")
  tentor                            users             @relation("schedules_tentorIdTousers", fields: [tentorId], references: [id], onDelete: Cascade, map: "schedules_ibfk_2")
  rooms                             rooms?            @relation(fields: [roomId], references: [id])
  users_schedules_userCreateTousers users?            @relation("schedules_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "schedules_ibfk_5")
  courses                           courses?          @relation(fields: [courseId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "schedules_ibfk_6")
  classTypes                        classTypes?       @relation(fields: [scheduleType], references: [id], onDelete: Restrict, map: "schedules_ibfk_7")

  @@index([roomId], map: "roomId")
  @@index([studyGroupId], map: "studyGroupId")
  @@index([tentorId], map: "tentorId")
  @@index([userCreate], map: "userCreate")
  @@index([courseId], map: "courseId")
  @@index([scheduleType], map: "scheduleType")
}

model schoolYears {
  id          String      @id @default(uuid()) @db.VarChar(36)
  name        String?     @db.VarChar(20)
  startYear   DateTime?   @db.Date
  endYear     DateTime?   @db.Date
  description String?     @db.VarChar(100)
  userCreate  String?     @db.VarChar(36)
  createdAt   DateTime?   @default(now()) @db.DateTime(0)
  updatedAt   DateTime?   @default(now()) @db.DateTime(0)
  deletedAt   DateTime?   @db.DateTime(0)
  registers   registers[]
  users       users?      @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "schoolyears_ibfk_1")

  @@index([userCreate], map: "userCreate")
}

model sessions {
  id         String      @id @default(uuid()) @db.VarChar(36)
  code       String?     @db.VarChar(50)
  name       String?     @db.VarChar(50)
  quantity   Int?
  userCreate String?     @db.VarChar(36)
  createdAt  DateTime?   @default(now()) @db.DateTime(0)
  updatedAt  DateTime?   @default(now()) @db.DateTime(0)
  deletedAt  DateTime?   @db.DateTime(0)
  registers  registers[]
  users      users?      @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "sessions_ibfk_1")

  @@index([userCreate], map: "userCreate")
}

model students {
  id                String                @id @default(uuid()) @db.VarChar(36)
  name              String?               @db.VarChar(100)
  studyProgram      String?               @db.VarChar(100)
  phone             String?               @db.VarChar(15)
  school            String?               @db.VarChar(100)
  placeBirth        String?               @db.VarChar(100)
  dateBirth         DateTime?             @db.Date
  country           String?               @db.VarChar(100)
  province          String?               @db.VarChar(100)
  city              String?               @db.VarChar(100)
  address           String?               @db.Text
  gender            students_gender?
  classGrade        String?               @db.VarChar(50)
  university        String?               @db.VarChar(100)
  statusStudy       students_statusStudy?
  parentName        String?               @db.VarChar(100)
  parentPhone       String?               @db.VarChar(15)
  image             String?               @db.Text
  agreement         Int?                  @db.SmallInt
  userCreate        String?               @db.VarChar(36)
  createdAt         DateTime?             @default(now()) @db.DateTime(0)
  updatedAt         DateTime?             @default(now()) @db.DateTime(0)
  deletedAt         DateTime?             @db.DateTime(0)
  email             String?               @db.VarChar(100)
  recordMateri      recordMateri[]
  registers         registers[]
  scheduleDetails   scheduleDetails[]
  users             users?                @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "students_ibfk_1")
  studyGroupDetails studyGroupDetails[]

  @@index([userCreate], map: "userCreate")
}

model studyGroupDetails {
  id           String       @id @default(uuid()) @db.VarChar(36)
  studyGroupId String?      @db.VarChar(36)
  studentId    String?      @db.VarChar(36)
  userCreate   String?      @db.VarChar(36)
  createdAt    DateTime?    @default(now()) @db.DateTime(0)
  updatedAt    DateTime?    @default(now()) @db.DateTime(0)
  deletedAt    DateTime?    @default(now()) @db.DateTime(0)
  studyGroups  studyGroups? @relation(fields: [studyGroupId], references: [id], onDelete: Cascade, map: "studygroupdetails_ibfk_1")
  students     students?    @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studygroupdetails_ibfk_2")
  users        users?       @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "studygroupdetails_ibfk_3")

  @@index([studentId], map: "studentId")
  @@index([studyGroupId], map: "studyGroupId")
  @@index([userCreate], map: "userCreate")
}

model studyGroups {
  id                String              @id @default(uuid()) @db.VarChar(36)
  name              String?             @db.VarChar(255)
  classId           String?             @db.VarChar(36)
  guidanceTypeId    String?             @db.VarChar(36)
  total             Int?                @db.SmallInt
  userCreate        String?             @db.VarChar(36)
  createdAt         DateTime?           @default(now()) @db.DateTime(0)
  updatedAt         DateTime?           @default(now()) @db.DateTime(0)
  deletedAt         DateTime?           @db.DateTime(0)
  schedules         schedules[]
  studyGroupDetails studyGroupDetails[]
  classMaster       classMaster?        @relation(fields: [classId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studygroups_ibfk_1")
  guidanceTypes     guidanceTypes?      @relation(fields: [guidanceTypeId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "studygroups_ibfk_2")
  users             users?              @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "studygroups_ibfk_3")

  @@index([classId], map: "classId")
  @@index([guidanceTypeId], map: "guidanceTypeId")
  @@index([userCreate], map: "userCreate")
}

model tentorNotAvailable {
  id                                         String    @id @default(uuid()) @db.VarChar(36)
  tentorId                                   String?   @db.VarChar(36)
  startDate                                  DateTime? @db.Timestamp(0)
  untilDate                                  DateTime? @db.Timestamp(0)
  description                                String?   @db.VarChar(255)
  userCreate                                 String?   @db.VarChar(36)
  createdAt                                  DateTime? @default(now()) @db.DateTime(0)
  updatedAt                                  DateTime? @default(now()) @db.DateTime(0)
  deletedAt                                  DateTime? @default(now()) @db.DateTime(0)
  userTentor                                 users?    @relation("tentorNotAvailable_tentorIdTousers", fields: [tentorId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "tentornotavailable_ibfk_1")
  users_tentorNotAvailable_userCreateTousers users?    @relation("tentorNotAvailable_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "tentornotavailable_ibfk_2")

  @@index([tentorId], map: "tentorId")
  @@index([userCreate], map: "userCreate")
}

model tentorSkills {
  id                                   String    @id @default(uuid()) @db.VarChar(36)
  tentorId                             String?   @db.VarChar(36)
  courseId                             String?   @db.VarChar(36)
  description                          String?   @db.VarChar(255)
  userCreate                           String?   @db.VarChar(36)
  createdAt                            DateTime? @default(now()) @db.DateTime(0)
  updatedAt                            DateTime? @default(now()) @db.DateTime(0)
  deletedAt                            DateTime? @db.DateTime(0)
  users_tentorSkills_tentorIdTousers   users?    @relation("tentorSkills_tentorIdTousers", fields: [tentorId], references: [id], onDelete: Cascade, map: "tentorskills_ibfk_1")
  users_tentorSkills_userCreateTousers users?    @relation("tentorSkills_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "tentorskills_ibfk_2")
  courses                              courses?  @relation(fields: [courseId], references: [id], onDelete: Cascade, onUpdate: Cascade, map: "tentorskills_ibfk_3")

  @@index([tentorId], map: "tentorId")
  @@index([userCreate], map: "userCreate")
  @@index([courseId], map: "courseId")
}

model universities {
  id          String    @id @default(uuid()) @db.VarChar(36)
  name        String?   @db.VarChar(255)
  code        String?   @db.VarChar(50)
  description String?   @db.VarChar(255)
  userCreate  String?   @db.VarChar(36)
  createdAt   DateTime? @default(now()) @db.DateTime(0)
  updatedAt   DateTime? @default(now()) @db.DateTime(0)
  deletedAt   DateTime? @db.DateTime(0)
  majors      majors[]
  users       users?    @relation(fields: [userCreate], references: [id], onUpdate: SetNull, map: "universities_ibfk_1")

  @@index([userCreate], map: "userCreate")
}

model userHasRoles {
  id                                   String    @id @default(uuid()) @db.VarChar(36)
  roleId                               String?   @db.VarChar(36)
  userId                               String?   @db.VarChar(36)
  userCreate                           String?   @db.VarChar(36)
  createdAt                            DateTime? @default(now()) @db.DateTime(0)
  updatedAt                            DateTime? @default(now()) @db.DateTime(0)
  deletedAt                            DateTime? @db.DateTime(0)
  roles                                roles?    @relation(fields: [roleId], references: [id], onDelete: Cascade, map: "userhasroles_ibfk_1")
  userTentor                           users?    @relation("userHasRoles_userIdTousers", fields: [userId], references: [id], onDelete: Cascade, map: "userhasroles_ibfk_2")
  users_userHasRoles_userCreateTousers users?    @relation("userHasRoles_userCreateTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "userhasroles_ibfk_3")

  @@index([roleId], map: "roleId")
  @@index([userCreate], map: "userCreate")
  @@index([userId], map: "userId")
}

model users {
  id                                                      String               @id @default(uuid()) @db.VarChar(36)
  name                                                    String?              @db.VarChar(150)
  email                                                   String?              @db.VarChar(255)
  username                                                String?              @db.VarChar(255)
  password                                                String?              @db.VarChar(255)
  token                                                   String?              @db.Text
  refreshToken                                            String?              @db.Text
  roleId                                                  String?              @db.VarChar(36)
  userType                                                users_userType?
  nickname                                                String?              @db.VarChar(100)
  address                                                 String?              @db.Text
  phone                                                   String?              @db.VarChar(15)
  userCreate                                              String?              @db.VarChar(36)
  createdAt                                               DateTime?            @default(now()) @db.DateTime(0)
  updatedAt                                               DateTime?            @default(now()) @db.DateTime(0)
  deletedAt                                               DateTime?            @db.DateTime(0)
  classMaster                                             classMaster[]
  classTypes                                              classTypes[]
  courses                                                 courses[]
  guidanceTypes                                           guidanceTypes[]
  locations                                               locations[]
  majors                                                  majors[]
  materials                                               materials[]
  packages                                                packages[]
  payrollDetails                                          payrollDetails[]
  payrolls_payrolls_userIdTousers                         payrolls[]           @relation("payrolls_userIdTousers")
  payrolls_payrolls_userCreateTousers                     payrolls[]           @relation("payrolls_userCreateTousers")
  permissionNames                                         permissionNames[]
  recordMateri                                            recordMateri[]
  recordMateri_recordMateri_tentorIdTousers               recordMateri[]       @relation("recordMateri_tentorIdTousers")
  registers                                               registers[]
  roleHasPermissions                                      roleHasPermissions[]
  roles_roles_userCreateTousers                           roles[]              @relation("roles_userCreateTousers")
  rooms                                                   rooms[]
  schedules_schedules_tentorIdTousers                     schedules[]          @relation("schedules_tentorIdTousers")
  schedules_schedules_userCreateTousers                   schedules[]          @relation("schedules_userCreateTousers")
  schoolYears                                             schoolYears[]
  sessions                                                sessions[]
  students                                                students[]
  studyGroupDetails                                       studyGroupDetails[]
  studyGroups                                             studyGroups[]
  tentorNotAvailable_tentorNotAvailable_tentorIdTousers   tentorNotAvailable[] @relation("tentorNotAvailable_tentorIdTousers")
  tentorNotAvailable_tentorNotAvailable_userCreateTousers tentorNotAvailable[] @relation("tentorNotAvailable_userCreateTousers")
  tentorSkills                                            tentorSkills[]       @relation("tentorSkills_tentorIdTousers")
  tentorSkills_tentorSkills_userCreateTousers             tentorSkills[]       @relation("tentorSkills_userCreateTousers")
  universities                                            universities[]
  userHasRoles_userHasRoles_userIdTousers                 userHasRoles[]       @relation("userHasRoles_userIdTousers")
  userHasRoles_userHasRoles_userCreateTousers             userHasRoles[]       @relation("userHasRoles_userCreateTousers")
  roles_users_roleIdToroles                               roles?               @relation("users_roleIdToroles", fields: [roleId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "users_ibfk_1")
  users                                                   users?               @relation("usersTousers", fields: [userCreate], references: [id], onUpdate: SetNull, map: "users_ibfk_2")
  other_users                                             users[]              @relation("usersTousers")

  @@index([roleId], map: "roleId")
  @@index([userCreate], map: "userCreate")
}

model scheduleDetails {
  id           String         @id @default(uuid()) @db.VarChar(36)
  scheduleId   String?        @db.VarChar(36)
  studentId    String?        @db.VarChar(36)
  userCreate   String?        @db.VarChar(36)
  createdAt    DateTime?      @db.DateTime(0)
  updatedAt    DateTime?      @db.DateTime(0)
  deletedAt    DateTime?      @db.DateTime(0)
  recordMateri recordMateri[]
  schedules    schedules?     @relation(fields: [scheduleId], references: [id], onDelete: Cascade, map: "scheduledetails_ibfk_1")
  students     students?      @relation(fields: [studentId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "scheduledetails_ibfk_2")

  @@index([scheduleId], map: "scheduleId")
  @@index([studentId], map: "studentId")
}

model setting {
  id    Int     @id @default(autoincrement()) @db.UnsignedInt
  name  String? @db.VarChar(255)
  value String? @db.Text
}

enum class_method {
  online
  offline
}

enum schedules_type {
  study
  try_out @map("try-out")
}

enum schedules_method {
  online
  offline
}

enum users_userType {
  admin
  tentor
}

enum registers_invoiceStatus {
  pending
  generated
}

enum guidanceTypes_type {
  private
  regular
}

enum students_statusStudy {
  pelajar
  alumni
}

enum students_gender {
  laki_laki
  perempuan
}

enum schedules_status {
  active
  non_active
  cancel
}